#!/bin/sh -e

main() {
	export BUILD_TYPE=${1:-Debug}
	export PLATFORM=${2:-linux}
	export OBJ_DIR=".build/$PLATFORM/$BUILD_TYPE"
	export BIN_DIR="bin/$PLATFORM/$BUILD_TYPE"

	rm -f .build/commands
	mkdir -p .build
	mkdir -p $BIN_DIR

	if [ -t 1 ]
	then
		PARALLEL_FLAGS="--bar"
	else
		PARALLEL_FLAGS="--progress"
	fi

	build_$PLATFORM
}

build_linux() {
	export CC=clang
	export CXX=clang++

	Release="-g -O3 -flto -DNDEBUG"
	Debug="-g -fsanitize=undefined,address -D_DEBUG"
	eval "BUILD_TYPE_FLAGS=\${$BUILD_TYPE}"

	DEV_FLAGS="-Wall -Wextra -pedantic -Werror"
	PROGRAM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS} -Ideps/sokol -Ideps/sokol_gp -Ideps/blibs -Ideps/physfs/src -DSOKOL_GLCORE"
	VM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS}"
	PHYSFS_FLAGS="${BUILD_TYPE_FLAGS} -DPHYSFS_SUPPORTS_DEFAULT=0 -DPHYSFS_SUPPORTS_ZIP=1"

	compile_common
	compile src/libs.c $PROGRAM_FLAGS
	compile deps/physfs/src/physfs_platform_unix.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_platform_posix.c $PHYSFS_FLAGS
	cat .build/commands | parallel $PARALLEL_FLAGS --max-procs $(nproc)
	echo "Linking..."

	$CXX \
		-fuse-ld=mold \
		-Wl,--separate-debug-file \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/{cli.c.o,vm.c.o,physfs.c.o} \
		${OBJ_DIR}/src/devices/{console.c.o,system.c.o,datetime.c.o,file.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs_platform_unix.c.o,physfs_platform_posix.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs.c.o,physfs_unicode.c.o,physfs_byteorder.c.o,physfs_archiver_zip.c.o,physfs_archiver_dir.c.o} \
		-o ${BIN_DIR}/buxn-cli

	$CXX \
		-fuse-ld=mold \
		-Wl,--separate-debug-file \
		-lGL -lX11 -lXcursor -lXi \
		-lasound \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/{gui.c.o,vm.c.o,physfs.c.o,libs.c.o} \
		${OBJ_DIR}/src/devices/{console.c.o,system.c.o,datetime.c.o,file.c.o,screen.c.o,mouse.c.o,audio.c.o,controller.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs_platform_unix.c.o,physfs_platform_posix.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs.c.o,physfs_unicode.c.o,physfs_byteorder.c.o,physfs_archiver_zip.c.o,physfs_archiver_dir.c.o} \
		-o ${BIN_DIR}/buxn-gui

	echo "Done"
}

build_cosmo() {
	if ! command -v cosmocc > /dev/null
	then
		echo "You need to add cosmopolitan toolchain to your path:"
		echo "export PATH=\$PATH:<path-to-cosmopolitan>/bin"
		exit 1
	fi

	COSMO_HOME=$(dirname $(dirname $(which cosmocc)))

	export CC=cosmocc
	export CXX=cosmoc++

	Release="-O3 -DNDEBUG"
	Debug="-mdbg -D_DEBUG"
	eval "BUILD_TYPE_FLAGS=\${$BUILD_TYPE}"

	DEV_FLAGS="-Wall -Wextra -pedantic -Werror"
	PROGRAM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS} -std=c11 -Ideps/sokol -Ideps/sokol_gp -Ideps/blibs -Ideps/physfs/src"
	VM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS}"
	PHYSFS_FLAGS="${BUILD_TYPE_FLAGS} -DPHYSFS_SUPPORTS_DEFAULT=0 -DPHYSFS_SUPPORTS_ZIP=1"

	compile_common
	cat .build/commands | parallel $PARALLEL_FLAGS --max-procs $(nproc)
	echo "Linking..."

	$CXX \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/{cli.c.o,vm.c.o} \
		${OBJ_DIR}/src/devices/{stdio_console.c.o,system.c.o,datetime.c.o} \
		-o ${BIN_DIR}/buxn-cli

	echo "Done"
}

compile_common() {
	# Program
	compile src/cli.c $PROGRAM_FLAGS
	compile src/physfs.c $PROGRAM_FLAGS
	compile src/gui.c $PROGRAM_FLAGS

	# VM
	compile src/vm.c $VM_FLAGS
	compile src/devices/console.c $VM_FLAGS
	compile src/devices/system.c $VM_FLAGS
	compile src/devices/screen.c $VM_FLAGS
	compile src/devices/mouse.c $VM_FLAGS
	compile src/devices/audio.c $VM_FLAGS
	compile src/devices/datetime.c $VM_FLAGS
	compile src/devices/file.c $VM_FLAGS
	compile src/devices/controller.c $VM_FLAGS

	# PhysFS
	compile deps/physfs/src/physfs.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_unicode.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_byteorder.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_archiver_zip.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_archiver_dir.c $PHYSFS_FLAGS
}

compile() {
	echo ./compile "$@" >> .build/commands
}

main $@
