#!/bin/bash -e

main() {
	export BUILD_TYPE=${1:-Debug}
	export PLATFORM=${2:-linux}
	export OBJ_DIR=".build/$BUILD_TYPE/$PLATFORM"
	export BIN_DIR="bin/$BUILD_TYPE/$PLATFORM"

	rm -f .build/commands
	mkdir -p .build
	mkdir -p $BIN_DIR

	if [ -t 1 ]
	then
		PARALLEL_FLAGS="--bar"
	else
		PARALLEL_FLAGS="--progress"
	fi

	build_$PLATFORM
}

build_linux() {
	export CC=clang
	export CXX=clang++

	Release="-g -O3 -flto -DNDEBUG"
	Debug="-g -fsanitize=undefined,address -fcolor-diagnostics -D_DEBUG"
	eval "BUILD_TYPE_FLAGS=\${$BUILD_TYPE}"

	DEV_FLAGS="-Wall -Wextra -pedantic -Werror"
	PROGRAM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS} -Ideps/sokol -Ideps/sokol_gp -Ideps/blibs -Ideps/physfs/src -Ideps/chibihash -DSOKOL_GLCORE"
	VM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS}"
	PHYSFS_FLAGS="${BUILD_TYPE_FLAGS} -DPHYSFS_SUPPORTS_DEFAULT=0 -DPHYSFS_SUPPORTS_ZIP=1"

	begin_compile
	compile_common
	compile src/gui.c $PROGRAM_FLAGS
	compile src/cli.c $PROGRAM_FLAGS
	compile src/asm.c $PROGRAM_FLAGS
	compile src/asm/asm.c $PROGRAM_FLAGS
	compile src/rom2exe.c $PROGRAM_FLAGS
	compile src/linux/platform.c $PROGRAM_FLAGS
	compile src/libs.c $PROGRAM_FLAGS
	compile deps/physfs/src/physfs_platform_unix.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_platform_posix.c $PHYSFS_FLAGS
	end_compile

	echo "Linking..."

	$CC \
		-fuse-ld=mold \
		-Wl,--separate-debug-file \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/{cli.c.o,vm.c.o,physfs.c.o} \
		${OBJ_DIR}/src/devices/{console.c.o,system.c.o,datetime.c.o,file.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs_platform_unix.c.o,physfs_platform_posix.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs.c.o,physfs_unicode.c.o,physfs_byteorder.c.o,physfs_archiver_zip.c.o,physfs_archiver_dir.c.o} \
		-o ${BIN_DIR}/buxn-cli

	$CC \
		-fuse-ld=mold \
		-Wl,--separate-debug-file \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/asm.c.o \
		${OBJ_DIR}/src/asm/asm.c.o \
		-o ${BIN_DIR}/buxn-asm

	$CC \
		-fuse-ld=mold \
		-Wl,--separate-debug-file \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/rom2exe.c.o \
		-o ${BIN_DIR}/buxn-rom2exe

	$CC \
		-fuse-ld=mold \
		-Wl,--separate-debug-file \
		-lGL -lm -lX11 -lXcursor -lXi -lasound \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/{gui.c.o,vm.c.o,physfs.c.o,metadata.c.o,libs.c.o,linux/platform.c.o} \
		${OBJ_DIR}/src/devices/{console.c.o,system.c.o,datetime.c.o,file.c.o,screen.c.o,mouse.c.o,audio.c.o,controller.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs_platform_unix.c.o,physfs_platform_posix.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs.c.o,physfs_unicode.c.o,physfs_byteorder.c.o,physfs_archiver_zip.c.o,physfs_archiver_dir.c.o} \
		-o ${BIN_DIR}/buxn-gui

	echo "Done"
}

build_android() {
	# TODO: Drop this as low as possible
	ANDROID_BUILD_TOOLS_VERSION=${ANDROID_BUILD_TOOLS_VERSION:-34.*}
	ANDROID_API_LEVEL=${ANDROID_API_LEVEL:-26}
	detect_android_sdk

	ANDROID_BUILD_HOST=${ANDROID_BUILD_HOST:-linux-x86_64}
	ANDROID_ABIS=${ANDROID_ABIS:-"x86 x86_64 armeabi-v7a arm64-v8a"}

	SAVED_OBJ_DIR=$OBJ_DIR
	SAVED_BIN_DIR=$BIN_DIR

	echo "Compiling..."
	COMMAND_FILE="$OBJ_DIR/commands"
	begin_compile
	for abi in $ANDROID_ABIS
	do
		OBJ_DIR=$SAVED_OBJ_DIR/$abi
		BIN_DIR=$SAVED_OBJ_DIR/apk/lib/$abi
		mkdir -p $OBJ_DIR
		mkdir -p $BIN_DIR
		android_compile_for $abi
	done
	end_compile
	COMMAND_FILE=""

	echo "Linking..."
	: > $SAVED_OBJ_DIR/link
	for abi in $ANDROID_ABIS
	do
		OBJ_DIR=$SAVED_OBJ_DIR/$abi
		BIN_DIR=$SAVED_OBJ_DIR/apk/lib/$abi
		android_link_for $abi
	done
	cat ${SAVED_OBJ_DIR}/link | parallel $PARALLEL_FLAGS --max-procs $(nproc)

	OBJ_DIR=$SAVED_OBJ_DIR
	BIN_DIR=$SAVED_BIN_DIR

	echo "Packaging..."

	ANDROID_PLATFORM="$ANDROID_HOME/platforms/android-$ANDROID_API_LEVEL"

	"$ANDROID_BUILD_TOOLS/aapt" package \
		-f \
		-M src/android/AndroidManifest.xml \
		-S src/android/res/ \
		-I "$ANDROID_PLATFORM/android.jar" \
		-F $OBJ_DIR/buxn.unsigned.apk \
		$OBJ_DIR/apk \
		src/android/apk

	"$ANDROID_BUILD_TOOLS/zipalign" -f -p 4 \
		$OBJ_DIR/buxn.unsigned.apk \
		$OBJ_DIR/buxn.aligned.apk

	# TODO: release key?
	ANDROID_KEYSTORE=~/.android/debug.keystore
	if [ ! -f $ANDROID_KEYSTORE ]
	then
		mkdir -p $(dirname $ANDROID_KEYSTORE)
		keytool -genkeypair -v \
			-keystore $ANDROID_KEYSTORE \
			-alias androiddebugkey \
			-keyalg RSA \
			-keysize 2048 \
			-validity 10000 \
			-storepass android \
			-keypass android \
			-dname "CN=Android Debug,O=Android,C=US"
	fi
	"$ANDROID_BUILD_TOOLS/apksigner" sign \
		--ks $ANDROID_KEYSTORE \
		--ks-key-alias androiddebugkey \
		--ks-pass pass:android \
		--key-pass pass:android \
		--out $BIN_DIR/buxn.apk \
		$OBJ_DIR/buxn.aligned.apk
	echo "Done"
}

android_compile_for() {
	android_get_tools $1

	compile_common
	compile src/gui.c $PROGRAM_FLAGS
	compile src/libs.c $PROGRAM_FLAGS
	compile src/android/platform.c $PROGRAM_FLAGS
	compile deps/physfs/src/physfs_platform_unix.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_platform_posix.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_platform_android.c $PHYSFS_FLAGS
}

android_link_for() {
	android_get_tools $1

	echo $CC \
		-lm -landroid -lEGL -lGLESv3 -laaudio -llog \
		-Wl,--no-undefined \
		-Wl,--version-script,src/android/libbuxn.map.txt \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/{gui.c.o,vm.c.o,physfs.c.o,metadata.c.o,libs.c.o,android/platform.c.o} \
		${OBJ_DIR}/src/devices/{console.c.o,system.c.o,datetime.c.o,file.c.o,screen.c.o,mouse.c.o,audio.c.o,controller.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs_platform_unix.c.o,physfs_platform_posix.c.o,physfs_platform_android.c.o} \
		${OBJ_DIR}/deps/physfs/src/{physfs.c.o,physfs_unicode.c.o,physfs_byteorder.c.o,physfs_archiver_zip.c.o,physfs_archiver_dir.c.o} \
		-shared -o $BIN_DIR/libbuxn.so >> $SAVED_OBJ_DIR/link

	#if [ "$BUILD_TYPE" = "Debug" ]
	#then
		#cp src/android/wrap.sh $BIN_DIR
		#cp $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$ANDROID_BUILD_HOST/lib/clang/*/lib/linux/libclang_rt.hwasan-*.so $BIN_DIR/
	#fi
}

android_get_tools() {
	abi=$1
	case $abi in
		"x86_64")
			triplet="x86_64-linux-android"
			;;
		"x86")
			triplet="i686-linux-android"
			;;
		"arm64-v8a")
			triplet="aarch64-linux-android"
			;;
		"armeabi-v7a")
			triplet="armv7a-linux-androideabi"
			;;
		*)
			echo "Unsupported ABI: $abi"
			exit 1
			;;
	esac

	export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$ANDROID_BUILD_HOST/bin/clang
	export CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/$ANDROID_BUILD_HOST/bin/clang++

	if [ ! -f $CC ] || [ ! -f $CXX ]
	then
		echo "Could not find compilers"
		echo "CC=$CC"
		echo "CXX=$CXX"

		exit 1
	fi

	Release="--target=$triplet$ANDROID_API_LEVEL -fPIC -g -O3 -flto -DNDEBUG"
	Debug="--target=$triplet$ANDROID_API_LEVEL -fPIC -g -fno-omit-frame-pointer -D_DEBUG"
	eval "BUILD_TYPE_FLAGS=\${$BUILD_TYPE}"

	DEV_FLAGS="-Wall -Wextra -pedantic -Werror"
	PROGRAM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS} -Ideps/sokol -Ideps/sokol_gp -Ideps/blibs -Ideps/physfs/src -DSOKOL_GLES3"
	VM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS}"
	PHYSFS_FLAGS="${BUILD_TYPE_FLAGS} -DPHYSFS_SUPPORTS_DEFAULT=0 -DPHYSFS_SUPPORTS_ZIP=1"
}

detect_android_sdk() {
	ANDROID_HOME=${ANDROID_HOME:-~/Android/Sdk}
	if [ ! -f "$ANDROID_HOME/platform-tools/adb" ]
	then
		echo "Android SDK not found, please set the environment variables ANDROID_HOME"
		exit 1
	fi
	echo "Found Android SDK at: $ANDROID_HOME"

	ANDROID_BUILD_TOOLS=$(echo $ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS_VERSION.* | sort -r | head -1)
	echo "Using build tools at: $ANDROID_BUILD_TOOLS"

	if [ -z "$ANDROID_NDK_ROOT" ]
	then
		ANDROID_NDK_VERSION=${ANDROID_NDK_VERSION:-*}
		ANDROID_NDK_ROOT=$(echo $ANDROID_HOME/ndk/$ANDROID_NDK_VERSION | sort -r | head -1)
	fi

	if [ ! -f "$ANDROID_NDK_ROOT/ndk-build" ]
	then
		echo "Android NDK not found, please set the environment variables ANDROID_NDK_ROOT"
		exit 1
	fi
	echo "Found Android NDK at: $ANDROID_NDK_ROOT"
}

build_cosmo() {
	if ! command -v cosmocc > /dev/null
	then
		echo "You need to add cosmopolitan toolchain to your path:"
		echo "export PATH=\$PATH:<path-to-cosmopolitan>/bin"
		exit 1
	fi

	COSMO_HOME=$(dirname $(dirname $(which cosmocc)))

	export CC=cosmocc
	export CXX=cosmoc++

	Release="-O3 -DNDEBUG"
	Debug="-mdbg -D_DEBUG"
	eval "BUILD_TYPE_FLAGS=\${$BUILD_TYPE}"

	DEV_FLAGS="-Wall -Wextra -pedantic -Werror"
	PROGRAM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS} -std=c11 -Ideps/sokol -Ideps/sokol_gp -Ideps/blibs -Ideps/physfs/src"
	VM_FLAGS="${BUILD_TYPE_FLAGS} ${DEV_FLAGS}"
	PHYSFS_FLAGS="${BUILD_TYPE_FLAGS} -DPHYSFS_SUPPORTS_DEFAULT=0 -DPHYSFS_SUPPORTS_ZIP=1"

	compile_common
	cat $OBJ_DIR/commands | parallel $PARALLEL_FLAGS --max-procs $(nproc)
	echo "Linking..."

	$CXX \
		${BUILD_TYPE_FLAGS} \
		${OBJ_DIR}/src/{cli.c.o,vm.c.o} \
		${OBJ_DIR}/src/devices/{stdio_console.c.o,system.c.o,datetime.c.o} \
		-o ${BIN_DIR}/buxn-cli

	echo "Done"
}

compile_common() {
	# Program
	compile src/physfs.c $PROGRAM_FLAGS

	# VM
	compile src/vm.c $VM_FLAGS
	compile src/metadata.c $VM_FLAGS
	compile src/devices/console.c $VM_FLAGS
	compile src/devices/system.c $VM_FLAGS
	compile src/devices/screen.c $VM_FLAGS
	compile src/devices/mouse.c $VM_FLAGS
	compile src/devices/audio.c $VM_FLAGS
	compile src/devices/datetime.c $VM_FLAGS
	compile src/devices/file.c $VM_FLAGS
	compile src/devices/controller.c $VM_FLAGS

	# PhysFS
	compile deps/physfs/src/physfs.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_unicode.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_byteorder.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_archiver_zip.c $PHYSFS_FLAGS
	compile deps/physfs/src/physfs_archiver_dir.c $PHYSFS_FLAGS
}

begin_compile() {
	mkdir -p $OBJ_DIR
	: > ${COMMAND_FILE:-$OBJ_DIR/commands}
}

compile() {
	mkdir -p $OBJ_DIR
	src=$1
	object=$OBJ_DIR/$1.o
	shift 1
	echo ./compile $CC $CXX $src $object "$@" >> ${COMMAND_FILE:-$OBJ_DIR/commands}
}

end_compile() {
	cat ${COMMAND_FILE:-$OBJ_DIR/commands} | parallel $PARALLEL_FLAGS --max-procs $(nproc)
}

main $@
