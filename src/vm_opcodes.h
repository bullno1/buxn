#ifndef BUXN_VM_OPCODES_H
#define BUXN_VM_OPCODES_H

// Generate a table for all opcodes
#define BUXN_OPCODE_DISPATCH(DISPATCH) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, BRK, 0x00, 0, 0, 0) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, INC, 0x01) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, POP, 0x02) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, NIP, 0x03) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, SWP, 0x04) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, ROT, 0x05) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, DUP, 0x06) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, OVR, 0x07) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, EQU, 0x08) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, NEQ, 0x09) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, GTH, 0x0a) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, LTH, 0x0b) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, JMP, 0x0c) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, JCN, 0x0d) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, JSR, 0x0e) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, STH, 0x0f) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, LDZ, 0x10) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, STZ, 0x11) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, LDR, 0x12) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, STR, 0x13) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, LDA, 0x14) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, STA, 0x15) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, DEI, 0x16) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, DEO, 0x17) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, ADD, 0x18) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, SUB, 0x19) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, MUL, 0x1a) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, DIV, 0x1b) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, AND, 0x1c) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, ORA, 0x1d) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, EOR, 0x1e) \
	BUXN_OPCODE_DISPATCH_POLY(DISPATCH, SFT, 0x1f) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, JCI, 0x20, 0, 0, 0) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, JMI, 0x40, 0, 0, 0) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, JSI, 0x60, 0, 0, 0) \
	BUXN_OPCODE_DISPATCH_KEEP(DISPATCH, LIT, 0x80)

// Expand a single polymorphic opcode entry into multiple monomorphic entries
#define BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, K, R, S) \
	DISPATCH(BUXN_OPCODE_NAME(NAME, K, R, S), BUXN_OPCODE_VALUE(BASE, K, R, S))

#define BUXN_OPCODE_DISPATCH_POLY(DISPATCH, NAME, BASE) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 0, 0, 0) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 0, 0, 1) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 0, 1, 0) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 0, 1, 1) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 1, 0, 0) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 1, 0, 1) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 1, 1, 0) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 1, 1, 1)

#define BUXN_OPCODE_DISPATCH_KEEP(DISPATCH, NAME, BASE) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 1, 0, 0) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 1, 0, 1) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 1, 1, 0) \
	BUXN_OPCODE_DISPATCH_MONO(DISPATCH, NAME, BASE, 1, 1, 1)
#define LITk LIT
#define LIT2k LIT2
#define LITkr LITr
#define LIT2kr LIT2r

#define BUXN_OPCODE_NAME(NAME, K, R, S) \
	BUXN_CONCAT4( \
		NAME, \
		BUXN_MAYBE_PICK(2, S), \
		BUXN_MAYBE_PICK(k, K), \
		BUXN_MAYBE_PICK(r, R) \
	)

#define BUXN_OPCODE_VALUE(BASE, K, R, S) \
	BASE \
	BUXN_MAYBE_PICK(| 0x80, K) \
	BUXN_MAYBE_PICK(| 0x40, R) \
	BUXN_MAYBE_PICK(| 0x20, S)

#define BUXN_CONCAT(A, B) BUXN_CONCAT_1(A, B)
#define BUXN_CONCAT_1(A, B) A ## B

#define BUXN_CONCAT4(A, B, C, D) BUXN_CONCAT4_1(A, B, C, D)
#define BUXN_CONCAT4_1(A, B, C, D) A ## B ## C ## D

#define BUXN_MAYBE_PICK(X, WHETHER) BUXN_CONCAT(BUXN_MAYBE_PICK_, WHETHER)(X)
#define BUXN_MAYBE_PICK_0(X)
#define BUXN_MAYBE_PICK_1(X) X

#endif
